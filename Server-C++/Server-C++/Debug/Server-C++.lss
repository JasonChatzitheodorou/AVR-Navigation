
Server-C++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000280  00800060  00001058  000010ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000130  008002e0  008002e0  0000136c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000013d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002529  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  00003a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fcd  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000630  00000000  00000000  000052a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000947  00000000  00000000  000058d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002180  00000000  00000000  0000621f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000839f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_init_sim>:
.global lcd_command_sim

.section .text      

lcd_init_sim:
	push r24
      92:	8f 93       	push	r24
	push r25
      94:	9f 93       	push	r25
	
	ldi r24, 40
      96:	88 e2       	ldi	r24, 0x28	; 40
	ldi r25, 0
      98:	90 e0       	ldi	r25, 0x00	; 0
	rcall wait_msec
      9a:	71 d0       	rcall	.+226    	; 0x17e <wait_msec>
	
	ldi r24, 0x30
      9c:	80 e3       	ldi	r24, 0x30	; 48
	out PORTD, r24
      9e:	82 bb       	out	0x12, r24	; 18
	sbi PORTD, PD3
      a0:	93 9a       	sbi	0x12, 3	; 18
	cbi PORTD, PD3
      a2:	93 98       	cbi	0x12, 3	; 18
	ldi r24, 39
      a4:	87 e2       	ldi	r24, 0x27	; 39
	ldi r25, 0
      a6:	90 e0       	ldi	r25, 0x00	; 0
	rcall wait_usec
      a8:	63 d0       	rcall	.+198    	; 0x170 <wait_usec>
	
	push r24
      aa:	8f 93       	push	r24
	push r25
      ac:	9f 93       	push	r25
	ldi r24,lo8(1000)
      ae:	88 ee       	ldi	r24, 0xE8	; 232
	ldi r25,hi8(1000)
      b0:	93 e0       	ldi	r25, 0x03	; 3
	rcall wait_usec
      b2:	5e d0       	rcall	.+188    	; 0x170 <wait_usec>
	pop r25
      b4:	9f 91       	pop	r25
	pop r24
      b6:	8f 91       	pop	r24
	
	ldi r24, 0x30
      b8:	80 e3       	ldi	r24, 0x30	; 48
	out PORTD, r24
      ba:	82 bb       	out	0x12, r24	; 18
	sbi PORTD, PD3
      bc:	93 9a       	sbi	0x12, 3	; 18
	cbi PORTD, PD3
      be:	93 98       	cbi	0x12, 3	; 18
	ldi r24,39
      c0:	87 e2       	ldi	r24, 0x27	; 39
	ldi r25,0
      c2:	90 e0       	ldi	r25, 0x00	; 0
	rcall wait_usec
      c4:	55 d0       	rcall	.+170    	; 0x170 <wait_usec>
	 
	push r24
      c6:	8f 93       	push	r24
	push r25
      c8:	9f 93       	push	r25
	ldi r24 ,lo8(1000)
      ca:	88 ee       	ldi	r24, 0xE8	; 232
	ldi r25 ,hi8(1000)
      cc:	93 e0       	ldi	r25, 0x03	; 3
	rcall wait_usec
      ce:	50 d0       	rcall	.+160    	; 0x170 <wait_usec>
	pop r25
      d0:	9f 91       	pop	r25
	pop r24
      d2:	8f 91       	pop	r24
	
	ldi r24,0x20
      d4:	80 e2       	ldi	r24, 0x20	; 32
	out PORTD, r24
      d6:	82 bb       	out	0x12, r24	; 18
	sbi PORTD, PD3
      d8:	93 9a       	sbi	0x12, 3	; 18
	cbi PORTD, PD3
      da:	93 98       	cbi	0x12, 3	; 18
	ldi r24,39
      dc:	87 e2       	ldi	r24, 0x27	; 39
	ldi r25,0
      de:	90 e0       	ldi	r25, 0x00	; 0
	rcall wait_usec
      e0:	47 d0       	rcall	.+142    	; 0x170 <wait_usec>
	
	push r24
      e2:	8f 93       	push	r24
	push r25
      e4:	9f 93       	push	r25
	ldi r24 ,lo8(1000)
      e6:	88 ee       	ldi	r24, 0xE8	; 232
	ldi r25 ,hi8(1000)
      e8:	93 e0       	ldi	r25, 0x03	; 3
	rcall wait_usec
      ea:	42 d0       	rcall	.+132    	; 0x170 <wait_usec>
	pop r25
      ec:	9f 91       	pop	r25
	pop r24
      ee:	8f 91       	pop	r24
	
	ldi r24,0x28
      f0:	88 e2       	ldi	r24, 0x28	; 40
	rcall lcd_command_sim
      f2:	0c d0       	rcall	.+24     	; 0x10c <lcd_command_sim>
	
	ldi r24,0x0c
      f4:	8c e0       	ldi	r24, 0x0C	; 12
	rcall lcd_command_sim
      f6:	0a d0       	rcall	.+20     	; 0x10c <lcd_command_sim>
	
	ldi r24,0x01
      f8:	81 e0       	ldi	r24, 0x01	; 1
	rcall lcd_command_sim
      fa:	08 d0       	rcall	.+16     	; 0x10c <lcd_command_sim>
	
	ldi r24, lo8(1530)
      fc:	8a ef       	ldi	r24, 0xFA	; 250
	ldi r25, hi8(1530)
      fe:	95 e0       	ldi	r25, 0x05	; 5
	rcall wait_usec
     100:	37 d0       	rcall	.+110    	; 0x170 <wait_usec>
	
	ldi r24 ,0x06
     102:	86 e0       	ldi	r24, 0x06	; 6
	rcall lcd_command_sim
     104:	03 d0       	rcall	.+6      	; 0x10c <lcd_command_sim>
	
	pop r25
     106:	9f 91       	pop	r25
	pop r24
     108:	8f 91       	pop	r24
	ret
     10a:	08 95       	ret

0000010c <lcd_command_sim>:

lcd_command_sim:
	push r24
     10c:	8f 93       	push	r24
	push r25
     10e:	9f 93       	push	r25
	cbi PORTD, PD2
     110:	92 98       	cbi	0x12, 2	; 18
	rcall write_2_nibbles_sim
     112:	10 d0       	rcall	.+32     	; 0x134 <write_2_nibbles_sim>
	ldi r24, 39
     114:	87 e2       	ldi	r24, 0x27	; 39
	ldi r25, 0
     116:	90 e0       	ldi	r25, 0x00	; 0
	rcall wait_usec
     118:	2b d0       	rcall	.+86     	; 0x170 <wait_usec>
	pop r25
     11a:	9f 91       	pop	r25
	pop r24
     11c:	8f 91       	pop	r24
	ret
     11e:	08 95       	ret

00000120 <lcd_data_sim>:

lcd_data_sim:
	push r24
     120:	8f 93       	push	r24
	push r25
     122:	9f 93       	push	r25
	sbi PORTD, PD2
     124:	92 9a       	sbi	0x12, 2	; 18
	rcall write_2_nibbles_sim
     126:	06 d0       	rcall	.+12     	; 0x134 <write_2_nibbles_sim>
	ldi r24 ,43
     128:	8b e2       	ldi	r24, 0x2B	; 43
	ldi r25 ,0
     12a:	90 e0       	ldi	r25, 0x00	; 0
	rcall wait_usec
     12c:	21 d0       	rcall	.+66     	; 0x170 <wait_usec>
	pop r25
     12e:	9f 91       	pop	r25
	pop r24
     130:	8f 91       	pop	r24
	ret
     132:	08 95       	ret

00000134 <write_2_nibbles_sim>:

write_2_nibbles_sim:
	push r24 
     134:	8f 93       	push	r24
	push r25
     136:	9f 93       	push	r25
	ldi r24 ,lo8(6000)
     138:	80 e7       	ldi	r24, 0x70	; 112
	ldi r25 ,hi8(6000)
     13a:	97 e1       	ldi	r25, 0x17	; 23
	rcall wait_usec
     13c:	19 d0       	rcall	.+50     	; 0x170 <wait_usec>
	pop r25
     13e:	9f 91       	pop	r25
	pop r24
     140:	8f 91       	pop	r24
	
	push r24
     142:	8f 93       	push	r24
	in r25, PIND
     144:	90 b3       	in	r25, 0x10	; 16
	andi r25, 0x0f
     146:	9f 70       	andi	r25, 0x0F	; 15
	andi r24, 0xf0
     148:	80 7f       	andi	r24, 0xF0	; 240
	add r24, r25
     14a:	89 0f       	add	r24, r25
	out PORTD, r24
     14c:	82 bb       	out	0x12, r24	; 18
	sbi PORTD, PD3
     14e:	93 9a       	sbi	0x12, 3	; 18
	cbi PORTD, PD3
     150:	93 98       	cbi	0x12, 3	; 18
	
	push r24
     152:	8f 93       	push	r24
	push r25
     154:	9f 93       	push	r25
	ldi r24 ,lo8(6000)
     156:	80 e7       	ldi	r24, 0x70	; 112
	ldi r25 ,hi8(6000)
     158:	97 e1       	ldi	r25, 0x17	; 23
	rcall wait_usec
     15a:	0a d0       	rcall	.+20     	; 0x170 <wait_usec>
	pop r25
     15c:	9f 91       	pop	r25
	pop r24
     15e:	8f 91       	pop	r24
	
	pop r24
     160:	8f 91       	pop	r24
	swap r24
     162:	82 95       	swap	r24
	andi r24 ,0xf0
     164:	80 7f       	andi	r24, 0xF0	; 240
	add r24, r25
     166:	89 0f       	add	r24, r25
	out PORTD, r24
     168:	82 bb       	out	0x12, r24	; 18
	sbi PORTD, PD3
     16a:	93 9a       	sbi	0x12, 3	; 18
	cbi PORTD, PD3
     16c:	93 98       	cbi	0x12, 3	; 18
	ret
     16e:	08 95       	ret

00000170 <wait_usec>:


wait_usec:
	sbiw r24, 1
     170:	01 97       	sbiw	r24, 0x01	; 1
	...
	nop 
	nop
	nop
	nop
	brne wait_usec
     17a:	d1 f7       	brne	.-12     	; 0x170 <wait_usec>
	ret 
     17c:	08 95       	ret

0000017e <wait_msec>:

wait_msec:
	push r24
     17e:	8f 93       	push	r24
	push r25
     180:	9f 93       	push	r25
	ldi r24, lo8(998)
     182:	86 ee       	ldi	r24, 0xE6	; 230
	ldi r25, hi8(998)
     184:	93 e0       	ldi	r25, 0x03	; 3
	rcall wait_usec
     186:	f4 df       	rcall	.-24     	; 0x170 <wait_usec>
	pop r25
     188:	9f 91       	pop	r25
	pop r24
     18a:	8f 91       	pop	r24
	sbiw r24, 1
     18c:	01 97       	sbiw	r24, 0x01	; 1
	brne wait_msec
     18e:	b9 f7       	brne	.-18     	; 0x17e <wait_msec>
     190:	08 95       	ret

00000192 <_Z9print_cmdPcPKciS1_S1_i>:
    return pos % l_size;
}

int x_pos(int pos){
    return (pos / l_size) % l_size;
}
     192:	af 92       	push	r10
     194:	bf 92       	push	r11
     196:	cf 92       	push	r12
     198:	df 92       	push	r13
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	ec 01       	movw	r28, r24
     1a8:	5b 01       	movw	r10, r22
     1aa:	69 01       	movw	r12, r18
     1ac:	45 2b       	or	r20, r21
     1ae:	21 f4       	brne	.+8      	; 0x1b8 <_Z9print_cmdPcPKciS1_S1_i+0x26>
     1b0:	62 ec       	ldi	r22, 0xC2	; 194
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     1b8:	b5 01       	movw	r22, r10
     1ba:	ce 01       	movw	r24, r28
     1bc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     1c0:	f6 01       	movw	r30, r12
     1c2:	80 81       	ld	r24, Z
     1c4:	88 23       	and	r24, r24
     1c6:	19 f1       	breq	.+70     	; 0x20e <_Z9print_cmdPcPKciS1_S1_i+0x7c>
     1c8:	65 ec       	ldi	r22, 0xC5	; 197
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	ce 01       	movw	r24, r28
     1ce:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     1d2:	67 ec       	ldi	r22, 0xC7	; 199
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	ce 01       	movw	r24, r28
     1d8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     1dc:	b6 01       	movw	r22, r12
     1de:	ce 01       	movw	r24, r28
     1e0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     1e4:	67 ec       	ldi	r22, 0xC7	; 199
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	ce 01       	movw	r24, r28
     1ea:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     1ee:	ef 28       	or	r14, r15
     1f0:	71 f0       	breq	.+28     	; 0x20e <_Z9print_cmdPcPKciS1_S1_i+0x7c>
     1f2:	69 ec       	ldi	r22, 0xC9	; 201
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	ce 01       	movw	r24, r28
     1f8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     1fc:	b8 01       	movw	r22, r16
     1fe:	ce 01       	movw	r24, r28
     200:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     204:	6b ec       	ldi	r22, 0xCB	; 203
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	ce 01       	movw	r24, r28
     20a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <strcat>
     20e:	66 ed       	ldi	r22, 0xD6	; 214
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	ce 01       	movw	r24, r28
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	df 90       	pop	r13
     222:	cf 90       	pop	r12
     224:	bf 90       	pop	r11
     226:	af 90       	pop	r10
     228:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <strcat>

0000022c <_Z10usart_initv>:
     22c:	1b b8       	out	0x0b, r1	; 11
     22e:	88 e1       	ldi	r24, 0x18	; 24
     230:	8a b9       	out	0x0a, r24	; 10
     232:	10 bc       	out	0x20, r1	; 32
     234:	83 e3       	ldi	r24, 0x33	; 51
     236:	89 b9       	out	0x09, r24	; 9
     238:	86 e8       	ldi	r24, 0x86	; 134
     23a:	80 bd       	out	0x20, r24	; 32
     23c:	08 95       	ret

0000023e <_Z14usart_transmitc>:
     23e:	5d 9b       	sbis	0x0b, 5	; 11
     240:	fe cf       	rjmp	.-4      	; 0x23e <_Z14usart_transmitc>
     242:	8c b9       	out	0x0c, r24	; 12
     244:	08 95       	ret

00000246 <_Z13usart_receivev>:
     246:	5f 9b       	sbis	0x0b, 7	; 11
     248:	fe cf       	rjmp	.-4      	; 0x246 <_Z13usart_receivev>
     24a:	8c b1       	in	r24, 0x0c	; 12
     24c:	08 95       	ret

0000024e <_Z14transmitStringPKc>:
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
     254:	89 91       	ld	r24, Y+
     256:	8a 30       	cpi	r24, 0x0A	; 10
     258:	19 f0       	breq	.+6      	; 0x260 <_Z14transmitStringPKc+0x12>
     25a:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z14usart_transmitc>
     25e:	fa cf       	rjmp	.-12     	; 0x254 <_Z14transmitStringPKc+0x6>
     260:	8a e0       	ldi	r24, 0x0A	; 10
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_Z14usart_transmitc>

0000026a <_Z13receiveStringPc>:
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	0e 94 23 01 	call	0x246	; 0x246 <_Z13usart_receivev>
     278:	8e 01       	movw	r16, r28
     27a:	f8 01       	movw	r30, r16
     27c:	ec 1b       	sub	r30, r28
     27e:	fd 0b       	sbc	r31, r29
     280:	8a 30       	cpi	r24, 0x0A	; 10
     282:	31 f0       	breq	.+12     	; 0x290 <_Z13receiveStringPc+0x26>
     284:	f8 01       	movw	r30, r16
     286:	81 93       	st	Z+, r24
     288:	8f 01       	movw	r16, r30
     28a:	0e 94 23 01 	call	0x246	; 0x246 <_Z13usart_receivev>
     28e:	f5 cf       	rjmp	.-22     	; 0x27a <_Z13receiveStringPc+0x10>
     290:	ec 0f       	add	r30, r28
     292:	fd 1f       	adc	r31, r29
     294:	80 83       	st	Z, r24
     296:	ce 01       	movw	r24, r28
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	0c 94 27 01 	jmp	0x24e	; 0x24e <_Z14transmitStringPKc>

000002a4 <_Z12checkSuccessv>:
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	e2 97       	sbiw	r28, 0x32	; 50
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	1a 82       	std	Y+2, r1	; 0x02
     2ba:	19 82       	std	Y+1, r1	; 0x01
     2bc:	fe 01       	movw	r30, r28
     2be:	33 96       	adiw	r30, 0x03	; 3
     2c0:	80 e3       	ldi	r24, 0x30	; 48
     2c2:	df 01       	movw	r26, r30
     2c4:	1d 92       	st	X+, r1
     2c6:	8a 95       	dec	r24
     2c8:	e9 f7       	brne	.-6      	; 0x2c4 <_Z12checkSuccessv+0x20>
     2ca:	ce 01       	movw	r24, r28
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	0e 94 35 01 	call	0x26a	; 0x26a <_Z13receiveStringPc>
     2d2:	6d ec       	ldi	r22, 0xCD	; 205
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	ce 01       	movw	r24, r28
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <strcmp>
     2de:	e2 96       	adiw	r28, 0x32	; 50
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <_Z11parseSensorv>:
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	c4 56       	subi	r28, 0x64	; 100
     2fc:	d1 09       	sbc	r29, r1
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	1c aa       	std	Y+52, r1	; 0x34
     30a:	1b aa       	std	Y+51, r1	; 0x33
     30c:	10 e3       	ldi	r17, 0x30	; 48
     30e:	fe 01       	movw	r30, r28
     310:	f5 96       	adiw	r30, 0x35	; 53
     312:	df 01       	movw	r26, r30
     314:	81 2f       	mov	r24, r17
     316:	1d 92       	st	X+, r1
     318:	8a 95       	dec	r24
     31a:	e9 f7       	brne	.-6      	; 0x316 <_Z11parseSensorv+0x26>
     31c:	ce 01       	movw	r24, r28
     31e:	c3 96       	adiw	r24, 0x33	; 51
     320:	0e 94 35 01 	call	0x26a	; 0x26a <_Z13receiveStringPc>
     324:	1a 82       	std	Y+2, r1	; 0x02
     326:	19 82       	std	Y+1, r1	; 0x01
     328:	fe 01       	movw	r30, r28
     32a:	33 96       	adiw	r30, 0x03	; 3
     32c:	df 01       	movw	r26, r30
     32e:	1d 92       	st	X+, r1
     330:	1a 95       	dec	r17
     332:	e9 f7       	brne	.-6      	; 0x32e <_Z11parseSensorv+0x3e>
     334:	f0 96       	adiw	r30, 0x30	; 48
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	21 91       	ld	r18, Z+
     33e:	22 32       	cpi	r18, 0x22	; 34
     340:	e1 f7       	brne	.-8      	; 0x33a <_Z11parseSensorv+0x4a>
     342:	e3 e3       	ldi	r30, 0x33	; 51
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ec 0f       	add	r30, r28
     348:	fd 1f       	adc	r31, r29
     34a:	e8 0f       	add	r30, r24
     34c:	f9 1f       	adc	r31, r25
     34e:	de 01       	movw	r26, r28
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	cd 01       	movw	r24, r26
     354:	21 91       	ld	r18, Z+
     356:	22 32       	cpi	r18, 0x22	; 34
     358:	11 f0       	breq	.+4      	; 0x35e <_Z11parseSensorv+0x6e>
     35a:	2d 93       	st	X+, r18
     35c:	fb cf       	rjmp	.-10     	; 0x354 <_Z11parseSensorv+0x64>
     35e:	0e 94 bb 07 	call	0xf76	; 0xf76 <atoi>
     362:	cc 59       	subi	r28, 0x9C	; 156
     364:	df 4f       	sbci	r29, 0xFF	; 255
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	08 95       	ret

00000378 <_Z7restarti>:
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	c4 56       	subi	r28, 0x64	; 100
     390:	d1 09       	sbc	r29, r1
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	5c 01       	movw	r10, r24
     39e:	86 ed       	ldi	r24, 0xD6	; 214
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     3a6:	1c aa       	std	Y+52, r1	; 0x34
     3a8:	1b aa       	std	Y+51, r1	; 0x33
     3aa:	80 e3       	ldi	r24, 0x30	; 48
     3ac:	d8 2e       	mov	r13, r24
     3ae:	fe 01       	movw	r30, r28
     3b0:	f5 96       	adiw	r30, 0x35	; 53
     3b2:	df 01       	movw	r26, r30
     3b4:	8d 2d       	mov	r24, r13
     3b6:	1d 92       	st	X+, r1
     3b8:	8a 95       	dec	r24
     3ba:	e9 f7       	brne	.-6      	; 0x3b6 <_Z7restarti+0x3e>
     3bc:	e1 2c       	mov	r14, r1
     3be:	f1 2c       	mov	r15, r1
     3c0:	07 ed       	ldi	r16, 0xD7	; 215
     3c2:	10 e0       	ldi	r17, 0x00	; 0
     3c4:	98 01       	movw	r18, r16
     3c6:	a5 01       	movw	r20, r10
     3c8:	68 ed       	ldi	r22, 0xD8	; 216
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	ce 01       	movw	r24, r28
     3ce:	c3 96       	adiw	r24, 0x33	; 51
     3d0:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9print_cmdPcPKciS1_S1_i>
     3d4:	ce 01       	movw	r24, r28
     3d6:	c3 96       	adiw	r24, 0x33	; 51
     3d8:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     3dc:	1a 82       	std	Y+2, r1	; 0x02
     3de:	19 82       	std	Y+1, r1	; 0x01
     3e0:	fe 01       	movw	r30, r28
     3e2:	33 96       	adiw	r30, 0x03	; 3
     3e4:	df 01       	movw	r26, r30
     3e6:	1d 92       	st	X+, r1
     3e8:	da 94       	dec	r13
     3ea:	e9 f7       	brne	.-6      	; 0x3e6 <_Z7restarti+0x6e>
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	0e 94 35 01 	call	0x26a	; 0x26a <_Z13receiveStringPc>
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	0e 94 35 01 	call	0x26a	; 0x26a <_Z13receiveStringPc>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	cc 59       	subi	r28, 0x9C	; 156
     402:	df 4f       	sbci	r29, 0xFF	; 255
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	08 95       	ret

00000422 <_Z7setSSIDPKci>:
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	e2 97       	sbiw	r28, 0x32	; 50
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	ab 01       	movw	r20, r22
     440:	1a 82       	std	Y+2, r1	; 0x02
     442:	19 82       	std	Y+1, r1	; 0x01
     444:	fe 01       	movw	r30, r28
     446:	33 96       	adiw	r30, 0x03	; 3
     448:	20 e3       	ldi	r18, 0x30	; 48
     44a:	df 01       	movw	r26, r30
     44c:	1d 92       	st	X+, r1
     44e:	2a 95       	dec	r18
     450:	e9 f7       	brne	.-6      	; 0x44c <_Z7setSSIDPKci+0x2a>
     452:	e1 2c       	mov	r14, r1
     454:	f1 2c       	mov	r15, r1
     456:	07 ed       	ldi	r16, 0xD7	; 215
     458:	10 e0       	ldi	r17, 0x00	; 0
     45a:	9c 01       	movw	r18, r24
     45c:	60 ee       	ldi	r22, 0xE0	; 224
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9print_cmdPcPKciS1_S1_i>
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     470:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12checkSuccessv>
     474:	e2 96       	adiw	r28, 0x32	; 50
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	08 95       	ret

0000048e <_Z11setPasswordPKci>:
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	e2 97       	sbiw	r28, 0x32	; 50
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	ab 01       	movw	r20, r22
     4ac:	1a 82       	std	Y+2, r1	; 0x02
     4ae:	19 82       	std	Y+1, r1	; 0x01
     4b0:	fe 01       	movw	r30, r28
     4b2:	33 96       	adiw	r30, 0x03	; 3
     4b4:	20 e3       	ldi	r18, 0x30	; 48
     4b6:	df 01       	movw	r26, r30
     4b8:	1d 92       	st	X+, r1
     4ba:	2a 95       	dec	r18
     4bc:	e9 f7       	brne	.-6      	; 0x4b8 <_Z11setPasswordPKci+0x2a>
     4be:	e1 2c       	mov	r14, r1
     4c0:	f1 2c       	mov	r15, r1
     4c2:	07 ed       	ldi	r16, 0xD7	; 215
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	9c 01       	movw	r18, r24
     4c8:	65 ee       	ldi	r22, 0xE5	; 229
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	ce 01       	movw	r24, r28
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9print_cmdPcPKciS1_S1_i>
     4d4:	ce 01       	movw	r24, r28
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     4dc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12checkSuccessv>
     4e0:	e2 96       	adiw	r28, 0x32	; 50
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	08 95       	ret

000004fa <_Z7startAPi>:
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	e2 97       	sbiw	r28, 0x32	; 50
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	1a 82       	std	Y+2, r1	; 0x02
     518:	19 82       	std	Y+1, r1	; 0x01
     51a:	fe 01       	movw	r30, r28
     51c:	33 96       	adiw	r30, 0x03	; 3
     51e:	20 e3       	ldi	r18, 0x30	; 48
     520:	df 01       	movw	r26, r30
     522:	1d 92       	st	X+, r1
     524:	2a 95       	dec	r18
     526:	e9 f7       	brne	.-6      	; 0x522 <_Z7startAPi+0x28>
     528:	e1 2c       	mov	r14, r1
     52a:	f1 2c       	mov	r15, r1
     52c:	07 ed       	ldi	r16, 0xD7	; 215
     52e:	10 e0       	ldi	r17, 0x00	; 0
     530:	98 01       	movw	r18, r16
     532:	ac 01       	movw	r20, r24
     534:	6e ee       	ldi	r22, 0xEE	; 238
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	ce 01       	movw	r24, r28
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9print_cmdPcPKciS1_S1_i>
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     548:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12checkSuccessv>
     54c:	e2 96       	adiw	r28, 0x32	; 50
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	08 95       	ret

00000566 <_Z12createServerPKcS0_i>:
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	8b 01       	movw	r16, r22
     570:	ea 01       	movw	r28, r20
     572:	ba 01       	movw	r22, r20
     574:	0e 94 11 02 	call	0x422	; 0x422 <_Z7setSSIDPKci>
     578:	89 2b       	or	r24, r25
     57a:	11 f0       	breq	.+4      	; 0x580 <_Z12createServerPKcS0_i+0x1a>
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	0d c0       	rjmp	.+26     	; 0x59a <_Z12createServerPKcS0_i+0x34>
     580:	be 01       	movw	r22, r28
     582:	c8 01       	movw	r24, r16
     584:	0e 94 47 02 	call	0x48e	; 0x48e <_Z11setPasswordPKci>
     588:	89 2b       	or	r24, r25
     58a:	c1 f7       	brne	.-16     	; 0x57c <_Z12createServerPKcS0_i+0x16>
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z7startAPi>
     592:	21 e0       	ldi	r18, 0x01	; 1
     594:	89 2b       	or	r24, r25
     596:	09 f4       	brne	.+2      	; 0x59a <_Z12createServerPKcS0_i+0x34>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	82 2f       	mov	r24, r18
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <_Z9newSensorPKci>:
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	e2 97       	sbiw	r28, 0x32	; 50
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	ab 01       	movw	r20, r22
     5c6:	1a 82       	std	Y+2, r1	; 0x02
     5c8:	19 82       	std	Y+1, r1	; 0x01
     5ca:	fe 01       	movw	r30, r28
     5cc:	33 96       	adiw	r30, 0x03	; 3
     5ce:	20 e3       	ldi	r18, 0x30	; 48
     5d0:	df 01       	movw	r26, r30
     5d2:	1d 92       	st	X+, r1
     5d4:	2a 95       	dec	r18
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <_Z9newSensorPKci+0x2a>
     5d8:	e1 2c       	mov	r14, r1
     5da:	f1 2c       	mov	r15, r1
     5dc:	07 ed       	ldi	r16, 0xD7	; 215
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	9c 01       	movw	r18, r24
     5e2:	6e ef       	ldi	r22, 0xFE	; 254
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	ce 01       	movw	r24, r28
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9print_cmdPcPKciS1_S1_i>
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     5f6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12checkSuccessv>
     5fa:	e2 96       	adiw	r28, 0x32	; 50
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <_Z14setSensorValuePKcS0_i>:
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	e2 97       	sbiw	r28, 0x32	; 50
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	1a 82       	std	Y+2, r1	; 0x02
     632:	19 82       	std	Y+1, r1	; 0x01
     634:	fe 01       	movw	r30, r28
     636:	33 96       	adiw	r30, 0x03	; 3
     638:	20 e3       	ldi	r18, 0x30	; 48
     63a:	df 01       	movw	r26, r30
     63c:	1d 92       	st	X+, r1
     63e:	2a 95       	dec	r18
     640:	e9 f7       	brne	.-6      	; 0x63c <_Z14setSensorValuePKcS0_i+0x28>
     642:	ee 24       	eor	r14, r14
     644:	e3 94       	inc	r14
     646:	f1 2c       	mov	r15, r1
     648:	8b 01       	movw	r16, r22
     64a:	9c 01       	movw	r18, r24
     64c:	68 e0       	ldi	r22, 0x08	; 8
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	ce 01       	movw	r24, r28
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9print_cmdPcPKciS1_S1_i>
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     660:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12checkSuccessv>
     664:	e2 96       	adiw	r28, 0x32	; 50
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	08 95       	ret

0000067e <_Z12setSensorIntPKcii>:
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	e2 97       	sbiw	r28, 0x32	; 50
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	8c 01       	movw	r16, r24
     69c:	cb 01       	movw	r24, r22
     69e:	7a 01       	movw	r14, r20
     6a0:	1a 82       	std	Y+2, r1	; 0x02
     6a2:	19 82       	std	Y+1, r1	; 0x01
     6a4:	fe 01       	movw	r30, r28
     6a6:	33 96       	adiw	r30, 0x03	; 3
     6a8:	20 e3       	ldi	r18, 0x30	; 48
     6aa:	df 01       	movw	r26, r30
     6ac:	1d 92       	st	X+, r1
     6ae:	2a 95       	dec	r18
     6b0:	e9 f7       	brne	.-6      	; 0x6ac <_Z12setSensorIntPKcii+0x2e>
     6b2:	4a e0       	ldi	r20, 0x0A	; 10
     6b4:	be 01       	movw	r22, r28
     6b6:	6f 5f       	subi	r22, 0xFF	; 255
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ba:	0e 94 ed 07 	call	0xfda	; 0xfda <__itoa_ncheck>
     6be:	a7 01       	movw	r20, r14
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	c8 01       	movw	r24, r16
     6c8:	0e 94 0a 03 	call	0x614	; 0x614 <_Z14setSensorValuePKcS0_i>
     6cc:	e2 96       	adiw	r28, 0x32	; 50
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <_Z14getSensorValuePKci>:
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	e2 97       	sbiw	r28, 0x32	; 50
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	ab 01       	movw	r20, r22
     704:	1a 82       	std	Y+2, r1	; 0x02
     706:	19 82       	std	Y+1, r1	; 0x01
     708:	fe 01       	movw	r30, r28
     70a:	33 96       	adiw	r30, 0x03	; 3
     70c:	20 e3       	ldi	r18, 0x30	; 48
     70e:	df 01       	movw	r26, r30
     710:	1d 92       	st	X+, r1
     712:	2a 95       	dec	r18
     714:	e9 f7       	brne	.-6      	; 0x710 <_Z14getSensorValuePKci+0x2a>
     716:	e1 2c       	mov	r14, r1
     718:	f1 2c       	mov	r15, r1
     71a:	07 ed       	ldi	r16, 0xD7	; 215
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	9c 01       	movw	r18, r24
     720:	6c e1       	ldi	r22, 0x1C	; 28
     722:	71 e0       	ldi	r23, 0x01	; 1
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9print_cmdPcPKciS1_S1_i>
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
     734:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z11parseSensorv>
     738:	e2 96       	adiw	r28, 0x32	; 50
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <_Z16lcd_print_stringPKc>:
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	8c 01       	movw	r16, r24
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command_sim>
     762:	e8 01       	movw	r28, r16
     764:	89 91       	ld	r24, Y+
     766:	8a 30       	cpi	r24, 0x0A	; 10
     768:	29 f0       	breq	.+10     	; 0x774 <_Z16lcd_print_stringPKc+0x22>
     76a:	88 23       	and	r24, r24
     76c:	19 f0       	breq	.+6      	; 0x774 <_Z16lcd_print_stringPKc+0x22>
     76e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_data_sim>
     772:	f8 cf       	rjmp	.-16     	; 0x764 <_Z16lcd_print_stringPKc+0x12>
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	08 95       	ret

0000077e <_Z13lcd_print_inti>:
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	2a 97       	sbiw	r28, 0x0a	; 10
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	1a 82       	std	Y+2, r1	; 0x02
     794:	19 82       	std	Y+1, r1	; 0x01
     796:	fe 01       	movw	r30, r28
     798:	33 96       	adiw	r30, 0x03	; 3
     79a:	28 e0       	ldi	r18, 0x08	; 8
     79c:	df 01       	movw	r26, r30
     79e:	1d 92       	st	X+, r1
     7a0:	2a 95       	dec	r18
     7a2:	e9 f7       	brne	.-6      	; 0x79e <_Z13lcd_print_inti+0x20>
     7a4:	4a e0       	ldi	r20, 0x0A	; 10
     7a6:	be 01       	movw	r22, r28
     7a8:	6f 5f       	subi	r22, 0xFF	; 255
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	0e 94 ed 07 	call	0xfda	; 0xfda <__itoa_ncheck>
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
     7b8:	2a 96       	adiw	r28, 0x0a	; 10
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <_Z8lcd_initv>:
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	81 bb       	out	0x11, r24	; 17
     7ce:	0c 94 49 00 	jmp	0x92	; 0x92 <lcd_init_sim>

000007d2 <_Z9check_posii>:

int check_pos(int x, int y){
    return ((x >= 0 && x < l_size) && (y >= 0 && y < l_size) && !visited[pos(x,y)] && labyrinth[x][y]);
     7d2:	87 30       	cpi	r24, 0x07	; 7
     7d4:	91 05       	cpc	r25, r1
     7d6:	e0 f4       	brcc	.+56     	; 0x810 <_Z9check_posii+0x3e>
     7d8:	67 30       	cpi	r22, 0x07	; 7
     7da:	71 05       	cpc	r23, r1
     7dc:	c8 f4       	brcc	.+50     	; 0x810 <_Z9check_posii+0x3e>
     7de:	47 e0       	ldi	r20, 0x07	; 7
     7e0:	48 9f       	mul	r20, r24
     7e2:	90 01       	movw	r18, r0
     7e4:	49 9f       	mul	r20, r25
     7e6:	30 0d       	add	r19, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	62 0f       	add	r22, r18
     7ec:	73 1f       	adc	r23, r19
     7ee:	66 0f       	add	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	fb 01       	movw	r30, r22
     7f4:	e4 5b       	subi	r30, 0xB4	; 180
     7f6:	fc 4f       	sbci	r31, 0xFC	; 252
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	89 2b       	or	r24, r25
     7fe:	41 f4       	brne	.+16     	; 0x810 <_Z9check_posii+0x3e>
     800:	fb 01       	movw	r30, r22
     802:	e0 5a       	subi	r30, 0xA0	; 160
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	20 81       	ld	r18, Z
     80a:	31 81       	ldd	r19, Z+1	; 0x01
     80c:	23 2b       	or	r18, r19
     80e:	09 f4       	brne	.+2      	; 0x812 <_Z9check_posii+0x40>
     810:	80 e0       	ldi	r24, 0x00	; 0
}
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	08 95       	ret

00000816 <_Z3BFSii>:

void BFS(int pos_start, int pos_end){
     816:	2f 92       	push	r2
     818:	3f 92       	push	r3
     81a:	4f 92       	push	r4
     81c:	5f 92       	push	r5
     81e:	6f 92       	push	r6
     820:	7f 92       	push	r7
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	00 d0       	rcall	.+0      	; 0x83c <_Z3BFSii+0x26>
     83c:	00 d0       	rcall	.+0      	; 0x83e <_Z3BFSii+0x28>
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	1b 01       	movw	r2, r22
    int front = q_size - 1, back = q_size - 1;
    int curr, x, y, temp;

    // push_front
    queue[front--] = pos_start;
     844:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <__data_end+0x6b>
     848:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <__data_end+0x6a>
     84c:	8c e4       	ldi	r24, 0x4C	; 76
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	9a 83       	std	Y+2, r25	; 0x02
     852:	89 83       	std	Y+1, r24	; 0x01
int check_pos(int x, int y){
    return ((x >= 0 && x < l_size) && (y >= 0 && y < l_size) && !visited[pos(x,y)] && labyrinth[x][y]);
}

void BFS(int pos_start, int pos_end){
    int front = q_size - 1, back = q_size - 1;
     854:	b5 e3       	ldi	r27, 0x35	; 53
     856:	6b 2e       	mov	r6, r27
     858:	71 2c       	mov	r7, r1
    int curr, x, y, temp;

    // push_front
    queue[front--] = pos_start;
     85a:	e4 e3       	ldi	r30, 0x34	; 52
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	fc 83       	std	Y+4, r31	; 0x04
     860:	eb 83       	std	Y+3, r30	; 0x03

    while(front <= back){
        //pop_back
        curr = queue[back--];
        visited[curr] = 1;
     862:	aa 24       	eor	r10, r10
     864:	a3 94       	inc	r10
     866:	b1 2c       	mov	r11, r1
int y_pos(int pos){
    return pos % l_size;
}

int x_pos(int pos){
    return (pos / l_size) % l_size;
     868:	07 e0       	ldi	r16, 0x07	; 7
     86a:	40 2e       	mov	r4, r16
     86c:	51 2c       	mov	r5, r1
    // push_front
    queue[front--] = pos_start;

    while(front <= back){
        //pop_back
        curr = queue[back--];
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	69 1a       	sub	r6, r25
     872:	71 08       	sbc	r7, r1
     874:	e9 81       	ldd	r30, Y+1	; 0x01
     876:	fa 81       	ldd	r31, Y+2	; 0x02
     878:	12 91       	ld	r17, -Z
     87a:	02 91       	ld	r16, -Z
     87c:	fa 83       	std	Y+2, r31	; 0x02
     87e:	e9 83       	std	Y+1, r30	; 0x01
        visited[curr] = 1;
     880:	f8 01       	movw	r30, r16
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	e4 5b       	subi	r30, 0xB4	; 180
     888:	fc 4f       	sbci	r31, 0xFC	; 252
     88a:	b1 82       	std	Z+1, r11	; 0x01
     88c:	a0 82       	st	Z, r10

        if(curr == pos_end) break;
     88e:	02 15       	cp	r16, r2
     890:	13 05       	cpc	r17, r3
     892:	09 f4       	brne	.+2      	; 0x896 <_Z3BFSii+0x80>
     894:	ba c0       	rjmp	.+372    	; 0xa0a <_Z3BFSii+0x1f4>
int y_pos(int pos){
    return pos % l_size;
}

int x_pos(int pos){
    return (pos / l_size) % l_size;
     896:	c8 01       	movw	r24, r16
     898:	b2 01       	movw	r22, r4
     89a:	0e 94 93 07 	call	0xf26	; 0xf26 <__divmodhi4>
     89e:	6c 01       	movw	r12, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	b2 01       	movw	r22, r4
     8a4:	0e 94 93 07 	call	0xf26	; 0xf26 <__divmodhi4>
     8a8:	7c 01       	movw	r14, r24
        
        x = x_pos(curr);
        y = y_pos(curr);

        // Down
        if(check_pos(x+1, y)) {
     8aa:	4c 01       	movw	r8, r24
     8ac:	ff ef       	ldi	r31, 0xFF	; 255
     8ae:	8f 1a       	sub	r8, r31
     8b0:	9f 0a       	sbc	r9, r31
     8b2:	b6 01       	movw	r22, r12
     8b4:	c4 01       	movw	r24, r8
     8b6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z9check_posii>
     8ba:	89 2b       	or	r24, r25
     8bc:	e1 f0       	breq	.+56     	; 0x8f6 <_Z3BFSii+0xe0>
int parent[l_size * l_size];
int visited[l_size * l_size];
int queue[q_size];

int pos(int x, int y){
    return x * l_size + y;
     8be:	27 e0       	ldi	r18, 0x07	; 7
     8c0:	28 9d       	mul	r18, r8
     8c2:	c0 01       	movw	r24, r0
     8c4:	29 9d       	mul	r18, r9
     8c6:	90 0d       	add	r25, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	8c 0d       	add	r24, r12
     8cc:	9d 1d       	adc	r25, r13
        y = y_pos(curr);

        // Down
        if(check_pos(x+1, y)) {
            temp = pos(x+1, y);
            queue[front--] = temp;
     8ce:	eb 81       	ldd	r30, Y+3	; 0x03
     8d0:	fc 81       	ldd	r31, Y+4	; 0x04
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	e0 52       	subi	r30, 0x20	; 32
     8d8:	fd 4f       	sbci	r31, 0xFD	; 253
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
            parent[temp] = curr;
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	fc 01       	movw	r30, r24
     8e4:	e2 55       	subi	r30, 0x52	; 82
     8e6:	fc 4f       	sbci	r31, 0xFC	; 252
     8e8:	11 83       	std	Z+1, r17	; 0x01
     8ea:	00 83       	st	Z, r16
        y = y_pos(curr);

        // Down
        if(check_pos(x+1, y)) {
            temp = pos(x+1, y);
            queue[front--] = temp;
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	9c 81       	ldd	r25, Y+4	; 0x04
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	9c 83       	std	Y+4, r25	; 0x04
     8f4:	8b 83       	std	Y+3, r24	; 0x03
            parent[temp] = curr;
        }

        //Up
        if(check_pos(x-1, y)) {
     8f6:	47 01       	movw	r8, r14
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	89 1a       	sub	r8, r25
     8fc:	91 08       	sbc	r9, r1
     8fe:	b6 01       	movw	r22, r12
     900:	c4 01       	movw	r24, r8
     902:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z9check_posii>
     906:	89 2b       	or	r24, r25
     908:	09 f1       	breq	.+66     	; 0x94c <_Z3BFSii+0x136>
int parent[l_size * l_size];
int visited[l_size * l_size];
int queue[q_size];

int pos(int x, int y){
    return x * l_size + y;
     90a:	e7 e0       	ldi	r30, 0x07	; 7
     90c:	e8 9d       	mul	r30, r8
     90e:	c0 01       	movw	r24, r0
     910:	e9 9d       	mul	r30, r9
     912:	90 0d       	add	r25, r0
     914:	11 24       	eor	r1, r1
     916:	8c 0d       	add	r24, r12
     918:	9d 1d       	adc	r25, r13
        }

        //Up
        if(check_pos(x-1, y)) {
            temp = pos(x-1, y);
            queue[front--] = temp;
     91a:	eb 81       	ldd	r30, Y+3	; 0x03
     91c:	fc 81       	ldd	r31, Y+4	; 0x04
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	e0 52       	subi	r30, 0x20	; 32
     924:	fd 4f       	sbci	r31, 0xFD	; 253
     926:	91 83       	std	Z+1, r25	; 0x01
     928:	80 83       	st	Z, r24
            parent[temp] = curr;
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	fc 01       	movw	r30, r24
     930:	e2 55       	subi	r30, 0x52	; 82
     932:	fc 4f       	sbci	r31, 0xFC	; 252
     934:	11 83       	std	Z+1, r17	; 0x01
     936:	00 83       	st	Z, r16
            visited[temp] = 1;
     938:	fc 01       	movw	r30, r24
     93a:	e4 5b       	subi	r30, 0xB4	; 180
     93c:	fc 4f       	sbci	r31, 0xFC	; 252
     93e:	b1 82       	std	Z+1, r11	; 0x01
     940:	a0 82       	st	Z, r10
        }

        //Up
        if(check_pos(x-1, y)) {
            temp = pos(x-1, y);
            queue[front--] = temp;
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
            parent[temp] = curr;
            visited[temp] = 1;
        }
        // Right
        if(check_pos(x, y+1)) {
     94c:	46 01       	movw	r8, r12
     94e:	9f ef       	ldi	r25, 0xFF	; 255
     950:	89 1a       	sub	r8, r25
     952:	99 0a       	sbc	r9, r25
     954:	b4 01       	movw	r22, r8
     956:	c7 01       	movw	r24, r14
     958:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z9check_posii>
     95c:	89 2b       	or	r24, r25
     95e:	11 f1       	breq	.+68     	; 0x9a4 <_Z3BFSii+0x18e>
int parent[l_size * l_size];
int visited[l_size * l_size];
int queue[q_size];

int pos(int x, int y){
    return x * l_size + y;
     960:	e7 e0       	ldi	r30, 0x07	; 7
     962:	ee 9d       	mul	r30, r14
     964:	c0 01       	movw	r24, r0
     966:	ef 9d       	mul	r30, r15
     968:	90 0d       	add	r25, r0
     96a:	11 24       	eor	r1, r1
     96c:	88 0e       	add	r8, r24
     96e:	99 1e       	adc	r9, r25
            visited[temp] = 1;
        }
        // Right
        if(check_pos(x, y+1)) {
            temp = pos(x, y+1);
            queue[front--] = temp;
     970:	eb 81       	ldd	r30, Y+3	; 0x03
     972:	fc 81       	ldd	r31, Y+4	; 0x04
     974:	ee 0f       	add	r30, r30
     976:	ff 1f       	adc	r31, r31
     978:	e0 52       	subi	r30, 0x20	; 32
     97a:	fd 4f       	sbci	r31, 0xFD	; 253
     97c:	91 82       	std	Z+1, r9	; 0x01
     97e:	80 82       	st	Z, r8
            parent[temp] = curr;
     980:	c4 01       	movw	r24, r8
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	fc 01       	movw	r30, r24
     988:	e2 55       	subi	r30, 0x52	; 82
     98a:	fc 4f       	sbci	r31, 0xFC	; 252
     98c:	11 83       	std	Z+1, r17	; 0x01
     98e:	00 83       	st	Z, r16
            visited[temp] = 1;
     990:	fc 01       	movw	r30, r24
     992:	e4 5b       	subi	r30, 0xB4	; 180
     994:	fc 4f       	sbci	r31, 0xFC	; 252
     996:	b1 82       	std	Z+1, r11	; 0x01
     998:	a0 82       	st	Z, r10
            visited[temp] = 1;
        }
        // Right
        if(check_pos(x, y+1)) {
            temp = pos(x, y+1);
            queue[front--] = temp;
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	9c 83       	std	Y+4, r25	; 0x04
     9a2:	8b 83       	std	Y+3, r24	; 0x03
            parent[temp] = curr;
            visited[temp] = 1;
        }

        // Left
        if(check_pos(x, y-1)) {
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	c9 1a       	sub	r12, r25
     9a8:	d1 08       	sbc	r13, r1
     9aa:	b6 01       	movw	r22, r12
     9ac:	c7 01       	movw	r24, r14
     9ae:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z9check_posii>
     9b2:	89 2b       	or	r24, r25
     9b4:	39 f4       	brne	.+14     	; 0x9c4 <_Z3BFSii+0x1ae>
    int curr, x, y, temp;

    // push_front
    queue[front--] = pos_start;

    while(front <= back){
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	68 16       	cp	r6, r24
     9bc:	79 06       	cpc	r7, r25
     9be:	0c f0       	brlt	.+2      	; 0x9c2 <_Z3BFSii+0x1ac>
     9c0:	56 cf       	rjmp	.-340    	; 0x86e <_Z3BFSii+0x58>
     9c2:	23 c0       	rjmp	.+70     	; 0xa0a <_Z3BFSii+0x1f4>
int parent[l_size * l_size];
int visited[l_size * l_size];
int queue[q_size];

int pos(int x, int y){
    return x * l_size + y;
     9c4:	e7 e0       	ldi	r30, 0x07	; 7
     9c6:	ee 9d       	mul	r30, r14
     9c8:	c0 01       	movw	r24, r0
     9ca:	ef 9d       	mul	r30, r15
     9cc:	90 0d       	add	r25, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	c8 0e       	add	r12, r24
     9d2:	d9 1e       	adc	r13, r25
        }

        // Left
        if(check_pos(x, y-1)) {
            temp = pos(x, y-1);
            queue[front--] = temp;
     9d4:	eb 81       	ldd	r30, Y+3	; 0x03
     9d6:	fc 81       	ldd	r31, Y+4	; 0x04
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	e0 52       	subi	r30, 0x20	; 32
     9de:	fd 4f       	sbci	r31, 0xFD	; 253
     9e0:	d1 82       	std	Z+1, r13	; 0x01
     9e2:	c0 82       	st	Z, r12
            parent[temp] = curr;
     9e4:	c6 01       	movw	r24, r12
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	fc 01       	movw	r30, r24
     9ec:	e2 55       	subi	r30, 0x52	; 82
     9ee:	fc 4f       	sbci	r31, 0xFC	; 252
     9f0:	11 83       	std	Z+1, r17	; 0x01
     9f2:	00 83       	st	Z, r16
            visited[temp] = 1;
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 5b       	subi	r30, 0xB4	; 180
     9f8:	fc 4f       	sbci	r31, 0xFC	; 252
     9fa:	b1 82       	std	Z+1, r11	; 0x01
     9fc:	a0 82       	st	Z, r10
        }

        // Left
        if(check_pos(x, y-1)) {
            temp = pos(x, y-1);
            queue[front--] = temp;
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	d6 cf       	rjmp	.-84     	; 0x9b6 <_Z3BFSii+0x1a0>
            parent[temp] = curr;
            visited[temp] = 1;
        }
    }
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	bf 90       	pop	r11
     a24:	af 90       	pop	r10
     a26:	9f 90       	pop	r9
     a28:	8f 90       	pop	r8
     a2a:	7f 90       	pop	r7
     a2c:	6f 90       	pop	r6
     a2e:	5f 90       	pop	r5
     a30:	4f 90       	pop	r4
     a32:	3f 90       	pop	r3
     a34:	2f 90       	pop	r2
     a36:	08 95       	ret

00000a38 <_Z9BFS_startiiii>:

// Returns the index of queue on which the directions begin 
int BFS_start(int x_start, int y_start, int x_end, int y_end){
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	7c 01       	movw	r14, r24
     a56:	8b 01       	movw	r16, r22
     a58:	ee ea       	ldi	r30, 0xAE	; 174
     a5a:	f3 e0       	ldi	r31, 0x03	; 3
     a5c:	ac e4       	ldi	r26, 0x4C	; 76
     a5e:	b3 e0       	ldi	r27, 0x03	; 3
    for(int i = 0; i < l_size * l_size; i++){
        parent[i] = -1;
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9f ef       	ldi	r25, 0xFF	; 255
     a64:	81 93       	st	Z+, r24
     a66:	91 93       	st	Z+, r25
        visited[i] = 0;
     a68:	1d 92       	st	X+, r1
     a6a:	1d 92       	st	X+, r1
    }
}

// Returns the index of queue on which the directions begin 
int BFS_start(int x_start, int y_start, int x_end, int y_end){
    for(int i = 0; i < l_size * l_size; i++){
     a6c:	64 e0       	ldi	r22, 0x04	; 4
     a6e:	e0 31       	cpi	r30, 0x10	; 16
     a70:	f6 07       	cpc	r31, r22
     a72:	c1 f7       	brne	.-16     	; 0xa64 <_Z9BFS_startiiii+0x2c>
int parent[l_size * l_size];
int visited[l_size * l_size];
int queue[q_size];

int pos(int x, int y){
    return x * l_size + y;
     a74:	97 e0       	ldi	r25, 0x07	; 7
     a76:	94 9f       	mul	r25, r20
     a78:	e0 01       	movw	r28, r0
     a7a:	95 9f       	mul	r25, r21
     a7c:	d0 0d       	add	r29, r0
     a7e:	11 24       	eor	r1, r1
     a80:	c2 0f       	add	r28, r18
     a82:	d3 1f       	adc	r29, r19
    for(int i = 0; i < l_size * l_size; i++){
        parent[i] = -1;
        visited[i] = 0;
    }

    BFS(pos(x_start, y_start), pos(x_end, y_end));
     a84:	9e 9d       	mul	r25, r14
     a86:	90 01       	movw	r18, r0
     a88:	9f 9d       	mul	r25, r15
     a8a:	30 0d       	add	r19, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	be 01       	movw	r22, r28
     a90:	c9 01       	movw	r24, r18
     a92:	80 0f       	add	r24, r16
     a94:	91 1f       	adc	r25, r17
     a96:	0e 94 0b 04 	call	0x816	; 0x816 <_Z3BFSii>

    int start = q_size - 1;
    int temp = pos(x_end, y_end), p = parent[temp];
     a9a:	ce 01       	movw	r24, r28
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	fc 01       	movw	r30, r24
     aa2:	e2 55       	subi	r30, 0x52	; 82
     aa4:	fc 4f       	sbci	r31, 0xFC	; 252
     aa6:	20 81       	ld	r18, Z
     aa8:	31 81       	ldd	r19, Z+1	; 0x01
    int x, y, x_p, y_p;
    if(visited[temp]){
     aaa:	fc 01       	movw	r30, r24
     aac:	e4 5b       	subi	r30, 0xB4	; 180
     aae:	fc 4f       	sbci	r31, 0xFC	; 252
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	89 2b       	or	r24, r25
     ab6:	09 f4       	brne	.+2      	; 0xaba <_Z9BFS_startiiii+0x82>
     ab8:	64 c0       	rjmp	.+200    	; 0xb82 <_Z9BFS_startiiii+0x14a>
     aba:	e5 e3       	ldi	r30, 0x35	; 53
     abc:	f0 e0       	ldi	r31, 0x00	; 0
int y_pos(int pos){
    return pos % l_size;
}

int x_pos(int pos){
    return (pos / l_size) % l_size;
     abe:	07 e0       	ldi	r16, 0x07	; 7
     ac0:	10 e0       	ldi	r17, 0x00	; 0
			 * 3 - Right
			*/
            if(x == x_p + 1) queue[start--] = 0;	
            else if(x == x_p - 1) queue[start--] = 2;
            else if(y == y_p + 1) queue[start--] = 3;
            else if(y == y_p - 1) queue[start--] = 1;
     ac2:	66 24       	eor	r6, r6
     ac4:	63 94       	inc	r6
     ac6:	71 2c       	mov	r7, r1
			 * 2 - Up
			 * 3 - Right
			*/
            if(x == x_p + 1) queue[start--] = 0;	
            else if(x == x_p - 1) queue[start--] = 2;
            else if(y == y_p + 1) queue[start--] = 3;
     ac8:	a3 e0       	ldi	r26, 0x03	; 3
     aca:	ca 2e       	mov	r12, r26
     acc:	d1 2c       	mov	r13, r1
			 * 1 - Left
			 * 2 - Up
			 * 3 - Right
			*/
            if(x == x_p + 1) queue[start--] = 0;	
            else if(x == x_p - 1) queue[start--] = 2;
     ace:	b2 e0       	ldi	r27, 0x02	; 2
     ad0:	ab 2e       	mov	r10, r27
     ad2:	b1 2c       	mov	r11, r1

    int start = q_size - 1;
    int temp = pos(x_end, y_end), p = parent[temp];
    int x, y, x_p, y_p;
    if(visited[temp]){
        while(p != -1){
     ad4:	2f 3f       	cpi	r18, 0xFF	; 255
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	38 07       	cpc	r19, r24
     ada:	09 f4       	brne	.+2      	; 0xade <_Z9BFS_startiiii+0xa6>
     adc:	4f c0       	rjmp	.+158    	; 0xb7c <_Z9BFS_startiiii+0x144>
int y_pos(int pos){
    return pos % l_size;
}

int x_pos(int pos){
    return (pos / l_size) % l_size;
     ade:	ce 01       	movw	r24, r28
     ae0:	b8 01       	movw	r22, r16
     ae2:	0e 94 93 07 	call	0xf26	; 0xf26 <__divmodhi4>
     ae6:	7c 01       	movw	r14, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	b8 01       	movw	r22, r16
     aec:	0e 94 93 07 	call	0xf26	; 0xf26 <__divmodhi4>
     af0:	4c 01       	movw	r8, r24
     af2:	c9 01       	movw	r24, r18
     af4:	b8 01       	movw	r22, r16
     af6:	0e 94 93 07 	call	0xf26	; 0xf26 <__divmodhi4>
     afa:	ec 01       	movw	r28, r24
     afc:	cb 01       	movw	r24, r22
     afe:	b8 01       	movw	r22, r16
     b00:	0e 94 93 07 	call	0xf26	; 0xf26 <__divmodhi4>
			 * 0 - Down
			 * 1 - Left
			 * 2 - Up
			 * 3 - Right
			*/
            if(x == x_p + 1) queue[start--] = 0;	
     b04:	ac 01       	movw	r20, r24
     b06:	4f 5f       	subi	r20, 0xFF	; 255
     b08:	5f 4f       	sbci	r21, 0xFF	; 255
     b0a:	48 15       	cp	r20, r8
     b0c:	59 05       	cpc	r21, r9
     b0e:	41 f4       	brne	.+16     	; 0xb20 <_Z9BFS_startiiii+0xe8>
     b10:	df 01       	movw	r26, r30
     b12:	aa 0f       	add	r26, r26
     b14:	bb 1f       	adc	r27, r27
     b16:	a0 52       	subi	r26, 0x20	; 32
     b18:	bd 4f       	sbci	r27, 0xFD	; 253
     b1a:	1d 92       	st	X+, r1
     b1c:	1c 92       	st	X, r1
     b1e:	24 c0       	rjmp	.+72     	; 0xb68 <_Z9BFS_startiiii+0x130>
            else if(x == x_p - 1) queue[start--] = 2;
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	88 15       	cp	r24, r8
     b24:	99 05       	cpc	r25, r9
     b26:	41 f4       	brne	.+16     	; 0xb38 <_Z9BFS_startiiii+0x100>
     b28:	df 01       	movw	r26, r30
     b2a:	aa 0f       	add	r26, r26
     b2c:	bb 1f       	adc	r27, r27
     b2e:	a0 52       	subi	r26, 0x20	; 32
     b30:	bd 4f       	sbci	r27, 0xFD	; 253
     b32:	ad 92       	st	X+, r10
     b34:	bc 92       	st	X, r11
     b36:	18 c0       	rjmp	.+48     	; 0xb68 <_Z9BFS_startiiii+0x130>
            else if(y == y_p + 1) queue[start--] = 3;
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	8e 15       	cp	r24, r14
     b3e:	9f 05       	cpc	r25, r15
     b40:	41 f4       	brne	.+16     	; 0xb52 <_Z9BFS_startiiii+0x11a>
     b42:	df 01       	movw	r26, r30
     b44:	aa 0f       	add	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	a0 52       	subi	r26, 0x20	; 32
     b4a:	bd 4f       	sbci	r27, 0xFD	; 253
     b4c:	cd 92       	st	X+, r12
     b4e:	dc 92       	st	X, r13
     b50:	0b c0       	rjmp	.+22     	; 0xb68 <_Z9BFS_startiiii+0x130>
            else if(y == y_p - 1) queue[start--] = 1;
     b52:	21 97       	sbiw	r28, 0x01	; 1
     b54:	ce 15       	cp	r28, r14
     b56:	df 05       	cpc	r29, r15
     b58:	41 f4       	brne	.+16     	; 0xb6a <_Z9BFS_startiiii+0x132>
     b5a:	df 01       	movw	r26, r30
     b5c:	aa 0f       	add	r26, r26
     b5e:	bb 1f       	adc	r27, r27
     b60:	a0 52       	subi	r26, 0x20	; 32
     b62:	bd 4f       	sbci	r27, 0xFD	; 253
     b64:	6d 92       	st	X+, r6
     b66:	7c 92       	st	X, r7
     b68:	31 97       	sbiw	r30, 0x01	; 1

            temp = p;
            p = parent[p];
     b6a:	d9 01       	movw	r26, r18
     b6c:	aa 0f       	add	r26, r26
     b6e:	bb 1f       	adc	r27, r27
     b70:	a2 55       	subi	r26, 0x52	; 82
     b72:	bc 4f       	sbci	r27, 0xFC	; 252

    int start = q_size - 1;
    int temp = pos(x_end, y_end), p = parent[temp];
    int x, y, x_p, y_p;
    if(visited[temp]){
        while(p != -1){
     b74:	e9 01       	movw	r28, r18
            else if(x == x_p - 1) queue[start--] = 2;
            else if(y == y_p + 1) queue[start--] = 3;
            else if(y == y_p - 1) queue[start--] = 1;

            temp = p;
            p = parent[p];
     b76:	2d 91       	ld	r18, X+
     b78:	3c 91       	ld	r19, X

    int start = q_size - 1;
    int temp = pos(x_end, y_end), p = parent[temp];
    int x, y, x_p, y_p;
    if(visited[temp]){
        while(p != -1){
     b7a:	ac cf       	rjmp	.-168    	; 0xad4 <_Z9BFS_startiiii+0x9c>
            p = parent[p];
        }

        start++;
		
		return start;
     b7c:	cf 01       	movw	r24, r30
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	11 c0       	rjmp	.+34     	; 0xba4 <_Z9BFS_startiiii+0x16c>
    }
    else{
        queue[start] = -1;
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	9f ef       	ldi	r25, 0xFF	; 255
     b86:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <__data_end+0x6b>
     b8a:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <__data_end+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b8e:	9f ef       	ldi	r25, 0xFF	; 255
     b90:	24 e3       	ldi	r18, 0x34	; 52
     b92:	6c e0       	ldi	r22, 0x0C	; 12
     b94:	91 50       	subi	r25, 0x01	; 1
     b96:	20 40       	sbci	r18, 0x00	; 0
     b98:	60 40       	sbci	r22, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <_Z9BFS_startiiii+0x15c>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <_Z9BFS_startiiii+0x166>
     b9e:	00 00       	nop
		//lcd_print_string("Impossible\n");
		_delay_ms(500);
		
		return -1;
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
    }
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	9f 90       	pop	r9
     bba:	8f 90       	pop	r8
     bbc:	7f 90       	pop	r7
     bbe:	6f 90       	pop	r6
     bc0:	08 95       	ret

00000bc2 <_Z15setupConnectioni>:
// This is the array that is filled by BFS_start in labyrinth with the directions
extern int queue[q_size];

/*---------------------------------------------*/

int setupConnection(int debug = 0) {
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	ec 01       	movw	r28, r24
	if(createServer("jasonAP", "awesomePassword12345", debug)) {
     bc8:	ac 01       	movw	r20, r24
     bca:	64 e3       	ldi	r22, 0x34	; 52
     bcc:	71 e0       	ldi	r23, 0x01	; 1
     bce:	89 e4       	ldi	r24, 0x49	; 73
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 b3 02 	call	0x566	; 0x566 <_Z12createServerPKcS0_i>
     bd6:	89 2b       	or	r24, r25
     bd8:	19 f0       	breq	.+6      	; 0xbe0 <_Z15setupConnectioni+0x1e>
		lcd_print_string("Couldn't create server");
     bda:	81 e5       	ldi	r24, 0x51	; 81
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	3b c0       	rjmp	.+118    	; 0xc56 <_Z15setupConnectioni+0x94>
		return 1;
	}
	
	if(newSensor("direction", debug)) {
     be0:	be 01       	movw	r22, r28
     be2:	88 e7       	ldi	r24, 0x78	; 120
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z9newSensorPKci>
     bea:	89 2b       	or	r24, r25
     bec:	19 f0       	breq	.+6      	; 0xbf4 <_Z15setupConnectioni+0x32>
		lcd_print_string("Couldn't create direction");
     bee:	88 e6       	ldi	r24, 0x68	; 104
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	31 c0       	rjmp	.+98     	; 0xc56 <_Z15setupConnectioni+0x94>
		return 1;
	}
	
	if(newSensor("clientAck", debug)) {
     bf4:	be 01       	movw	r22, r28
     bf6:	82 e9       	ldi	r24, 0x92	; 146
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z9newSensorPKci>
     bfe:	89 2b       	or	r24, r25
     c00:	19 f0       	breq	.+6      	; 0xc08 <_Z15setupConnectioni+0x46>
		lcd_print_string("Couldn't create clientAck");
     c02:	82 e8       	ldi	r24, 0x82	; 130
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	27 c0       	rjmp	.+78     	; 0xc56 <_Z15setupConnectioni+0x94>
		return 1;
	}
	
	if(newSensor("x_end", debug)) {
     c08:	be 01       	movw	r22, r28
     c0a:	8c ea       	ldi	r24, 0xAC	; 172
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z9newSensorPKci>
     c12:	89 2b       	or	r24, r25
     c14:	19 f0       	breq	.+6      	; 0xc1c <_Z15setupConnectioni+0x5a>
		lcd_print_string("Couldn't create x_end");
     c16:	8c e9       	ldi	r24, 0x9C	; 156
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	1d c0       	rjmp	.+58     	; 0xc56 <_Z15setupConnectioni+0x94>
		return 1;
	}
	
	if(newSensor("y_end", debug)) {
     c1c:	be 01       	movw	r22, r28
     c1e:	82 ec       	ldi	r24, 0xC2	; 194
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z9newSensorPKci>
     c26:	89 2b       	or	r24, r25
     c28:	19 f0       	breq	.+6      	; 0xc30 <_Z15setupConnectioni+0x6e>
		lcd_print_string("Couldn't create y_end");
     c2a:	82 eb       	ldi	r24, 0xB2	; 178
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	13 c0       	rjmp	.+38     	; 0xc56 <_Z15setupConnectioni+0x94>
		return 1;
	}
	
	if(newSensor("x_start", debug)) {
     c30:	be 01       	movw	r22, r28
     c32:	88 ed       	ldi	r24, 0xD8	; 216
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z9newSensorPKci>
     c3a:	89 2b       	or	r24, r25
     c3c:	19 f0       	breq	.+6      	; 0xc44 <_Z15setupConnectioni+0x82>
		lcd_print_string("Couldn't create x_start");
     c3e:	88 ec       	ldi	r24, 0xC8	; 200
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	09 c0       	rjmp	.+18     	; 0xc56 <_Z15setupConnectioni+0x94>
		return 1;
	}
	
	if(newSensor("y_start", debug)) {
     c44:	be 01       	movw	r22, r28
     c46:	80 ef       	ldi	r24, 0xF0	; 240
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z9newSensorPKci>
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	31 f0       	breq	.+12     	; 0xc5e <_Z15setupConnectioni+0x9c>
		lcd_print_string("Couldn't create y_start");
     c52:	80 ee       	ldi	r24, 0xE0	; 224
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
		return 1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <_Z22resetSensorsDirectionsii>:

void resetSensorsDirections(int direction, int debug = 0){
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	eb 01       	movw	r28, r22
	if(setSensorInt("direction", direction, debug)) lcd_print_string("Couldn't set direction");
     c6a:	ab 01       	movw	r20, r22
     c6c:	bc 01       	movw	r22, r24
     c6e:	88 e7       	ldi	r24, 0x78	; 120
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 3f 03 	call	0x67e	; 0x67e <_Z12setSensorIntPKcii>
     c76:	89 2b       	or	r24, r25
     c78:	21 f0       	breq	.+8      	; 0xc82 <_Z22resetSensorsDirectionsii+0x1e>
     c7a:	88 ef       	ldi	r24, 0xF8	; 248
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
	
	if(setSensorInt("clientAck", 1, debug)) lcd_print_string("Couldn't set clientAck\n");
     c82:	ae 01       	movw	r20, r28
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	82 e9       	ldi	r24, 0x92	; 146
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 3f 03 	call	0x67e	; 0x67e <_Z12setSensorIntPKcii>
     c90:	89 2b       	or	r24, r25
     c92:	31 f0       	breq	.+12     	; 0xca0 <_Z22resetSensorsDirectionsii+0x3c>
     c94:	8f e0       	ldi	r24, 0x0F	; 15
     c96:	92 e0       	ldi	r25, 0x02	; 2
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
}

void resetSensorsDirections(int direction, int debug = 0){
	if(setSensorInt("direction", direction, debug)) lcd_print_string("Couldn't set direction");
	
	if(setSensorInt("clientAck", 1, debug)) lcd_print_string("Couldn't set clientAck\n");
     c9c:	0c 94 a9 03 	jmp	0x752	; 0x752 <_Z16lcd_print_stringPKc>
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <_Z23resetSensorsCoordinatesi>:

void resetSensorsCoordinates(int debug = 0){
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
	if(setSensorInt("x_start", -1, debug)) lcd_print_string("Couldn't set x_start");
     cac:	ac 01       	movw	r20, r24
     cae:	6f ef       	ldi	r22, 0xFF	; 255
     cb0:	7f ef       	ldi	r23, 0xFF	; 255
     cb2:	88 ed       	ldi	r24, 0xD8	; 216
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 3f 03 	call	0x67e	; 0x67e <_Z12setSensorIntPKcii>
     cba:	89 2b       	or	r24, r25
     cbc:	21 f0       	breq	.+8      	; 0xcc6 <_Z23resetSensorsCoordinatesi+0x20>
     cbe:	87 e2       	ldi	r24, 0x27	; 39
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
	if(setSensorInt("y_start", -1, debug)) lcd_print_string("Couldn't set y_start");
     cc6:	ae 01       	movw	r20, r28
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7f ef       	ldi	r23, 0xFF	; 255
     ccc:	80 ef       	ldi	r24, 0xF0	; 240
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 3f 03 	call	0x67e	; 0x67e <_Z12setSensorIntPKcii>
     cd4:	89 2b       	or	r24, r25
     cd6:	21 f0       	breq	.+8      	; 0xce0 <_Z23resetSensorsCoordinatesi+0x3a>
     cd8:	8c e3       	ldi	r24, 0x3C	; 60
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
	
	if(setSensorInt("x_end", -1, debug)) lcd_print_string("Couldn't set x_end");
     ce0:	ae 01       	movw	r20, r28
     ce2:	6f ef       	ldi	r22, 0xFF	; 255
     ce4:	7f ef       	ldi	r23, 0xFF	; 255
     ce6:	8c ea       	ldi	r24, 0xAC	; 172
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 3f 03 	call	0x67e	; 0x67e <_Z12setSensorIntPKcii>
     cee:	89 2b       	or	r24, r25
     cf0:	21 f0       	breq	.+8      	; 0xcfa <_Z23resetSensorsCoordinatesi+0x54>
     cf2:	81 e5       	ldi	r24, 0x51	; 81
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
	if(setSensorInt("y_end", -1, debug)) lcd_print_string("Couldn't set y_end");	
     cfa:	ae 01       	movw	r20, r28
     cfc:	6f ef       	ldi	r22, 0xFF	; 255
     cfe:	7f ef       	ldi	r23, 0xFF	; 255
     d00:	82 ec       	ldi	r24, 0xC2	; 194
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 3f 03 	call	0x67e	; 0x67e <_Z12setSensorIntPKcii>
     d08:	89 2b       	or	r24, r25
     d0a:	21 f0       	breq	.+8      	; 0xd14 <_Z23resetSensorsCoordinatesi+0x6e>
     d0c:	84 e6       	ldi	r24, 0x64	; 100
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
	
	if(setSensorInt("clientAck", 1, debug)) lcd_print_string("Couldn't set clientAck\n");
     d14:	ae 01       	movw	r20, r28
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	82 e9       	ldi	r24, 0x92	; 146
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 3f 03 	call	0x67e	; 0x67e <_Z12setSensorIntPKcii>
     d22:	89 2b       	or	r24, r25
     d24:	31 f0       	breq	.+12     	; 0xd32 <_Z23resetSensorsCoordinatesi+0x8c>
     d26:	8f e0       	ldi	r24, 0x0F	; 15
     d28:	92 e0       	ldi	r25, 0x02	; 2

}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
	if(setSensorInt("y_start", -1, debug)) lcd_print_string("Couldn't set y_start");
	
	if(setSensorInt("x_end", -1, debug)) lcd_print_string("Couldn't set x_end");
	if(setSensorInt("y_end", -1, debug)) lcd_print_string("Couldn't set y_end");	
	
	if(setSensorInt("clientAck", 1, debug)) lcd_print_string("Couldn't set clientAck\n");
     d2e:	0c 94 a9 03 	jmp	0x752	; 0x752 <_Z16lcd_print_stringPKc>

}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <_Z13waitForClientv>:

void waitForClient(){
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	e2 97       	sbiw	r28, 0x32	; 50
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
	char s[CMD] = "";
     d4c:	1a 82       	std	Y+2, r1	; 0x02
     d4e:	19 82       	std	Y+1, r1	; 0x01
     d50:	fe 01       	movw	r30, r28
     d52:	33 96       	adiw	r30, 0x03	; 3
     d54:	80 e3       	ldi	r24, 0x30	; 48
     d56:	df 01       	movw	r26, r30
     d58:	1d 92       	st	X+, r1
     d5a:	8a 95       	dec	r24
     d5c:	e9 f7       	brne	.-6      	; 0xd58 <_Z13waitForClientv+0x20>
	
	// Scan for client response every 2 sec
	while(1){
		transmitString("Waiting for ServedClient\n");
     d5e:	87 e7       	ldi	r24, 0x77	; 119
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14transmitStringPKc>
		
		receiveString(s);
     d66:	ce 01       	movw	r24, r28
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	0e 94 35 01 	call	0x26a	; 0x26a <_Z13receiveStringPc>
		if(!strcmp(s, "ServedClient\n")) return;
     d6e:	63 e8       	ldi	r22, 0x83	; 131
     d70:	72 e0       	ldi	r23, 0x02	; 2
     d72:	ce 01       	movw	r24, r28
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <strcmp>
     d7a:	89 2b       	or	r24, r25
     d7c:	81 f7       	brne	.-32     	; 0xd5e <_Z13waitForClientv+0x26>
	}
}
     d7e:	e2 96       	adiw	r28, 0x32	; 50
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <_Z14sendDirectionsii>:

void sendDirections(int direction, int debug = 0){
	// Impossible destination
	if(direction == -1) direction = 5;
     d90:	8f 3f       	cpi	r24, 0xFF	; 255
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	92 07       	cpc	r25, r18
     d96:	11 f4       	brne	.+4      	; 0xd9c <_Z14sendDirectionsii+0xc>
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	90 e0       	ldi	r25, 0x00	; 0
	
	// Refresh server sensors
	resetSensorsDirections(direction, debug);
     d9c:	0e 94 32 06 	call	0xc64	; 0xc64 <_Z22resetSensorsDirectionsii>
	
	// Wait for client's response
	waitForClient();
     da0:	0e 94 9c 06 	call	0xd38	; 0xd38 <_Z13waitForClientv>
	lcd_print_string("Sent\n");
     da4:	81 e9       	ldi	r24, 0x91	; 145
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	0c 94 a9 03 	jmp	0x752	; 0x752 <_Z16lcd_print_stringPKc>

00000dac <_Z14getCoordinatesRiS_S_S_i>:
}

void getCoordinates(int &x_start, int &y_start, int &x_end, int &y_end, int debug = 0){	
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	5c 01       	movw	r10, r24
     dc2:	6b 01       	movw	r12, r22
     dc4:	7a 01       	movw	r14, r20
     dc6:	e9 01       	movw	r28, r18
	// Reset server sensors
	resetSensorsCoordinates(debug);
     dc8:	c8 01       	movw	r24, r16
     dca:	0e 94 53 06 	call	0xca6	; 0xca6 <_Z23resetSensorsCoordinatesi>
	
	// Wait for client's response
	waitForClient();
     dce:	0e 94 9c 06 	call	0xd38	; 0xd38 <_Z13waitForClientv>
	lcd_print_string("Received destination\n");
     dd2:	87 e9       	ldi	r24, 0x97	; 151
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
	
	// Get starting location
	x_start = getSensorValue("x_start", debug);
     dda:	b8 01       	movw	r22, r16
     ddc:	88 ed       	ldi	r24, 0xD8	; 216
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z14getSensorValuePKci>
     de4:	f5 01       	movw	r30, r10
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
	y_start = getSensorValue("y_start", debug);
     dea:	b8 01       	movw	r22, r16
     dec:	80 ef       	ldi	r24, 0xF0	; 240
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z14getSensorValuePKci>
     df4:	f6 01       	movw	r30, r12
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
	
	// Get destination
	x_end = getSensorValue("x_end", debug);
     dfa:	b8 01       	movw	r22, r16
     dfc:	8c ea       	ldi	r24, 0xAC	; 172
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z14getSensorValuePKci>
     e04:	f7 01       	movw	r30, r14
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
	y_end = getSensorValue("y_end", debug);
     e0a:	b8 01       	movw	r22, r16
     e0c:	82 ec       	ldi	r24, 0xC2	; 194
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z14getSensorValuePKci>
     e14:	99 83       	std	Y+1, r25	; 0x01
     e16:	88 83       	st	Y, r24
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	bf 90       	pop	r11
     e2a:	af 90       	pop	r10
     e2c:	08 95       	ret

00000e2e <main>:

int main(void)
{	
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	28 97       	sbiw	r28, 0x08	; 8
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	int index;
	int x_end, y_end;
	int x_start, y_start;
	DDRC = 0;
     e42:	14 ba       	out	0x14, r1	; 20
	DDRB = 0xff;
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	87 bb       	out	0x17, r24	; 23
	usart_init();
     e48:	0e 94 16 01 	call	0x22c	; 0x22c <_Z10usart_initv>
	lcd_init();
     e4c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z8lcd_initv>
	restart(ESP_DEBUG);
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 bc 01 	call	0x378	; 0x378 <_Z7restarti>
	
	// Start the server
	lcd_print_string("Starting server ...\n");
     e58:	8d ea       	ldi	r24, 0xAD	; 173
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
	while(setupConnection(ESP_DEBUG)){
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_Z15setupConnectioni>
     e68:	89 2b       	or	r24, r25
     e6a:	c9 f1       	breq	.+114    	; 0xede <main+0xb0>
     e6c:	2f ef       	ldi	r18, 0xFF	; 255
     e6e:	34 e3       	ldi	r19, 0x34	; 52
     e70:	8c e0       	ldi	r24, 0x0C	; 12
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	80 40       	sbci	r24, 0x00	; 0
     e78:	e1 f7       	brne	.-8      	; 0xe72 <main+0x44>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <main+0x4e>
     e7c:	00 00       	nop
     e7e:	f0 cf       	rjmp	.-32     	; 0xe60 <main+0x32>
		index = BFS_start(x_start, y_start, x_end, y_end);
		lcd_print_string("Ready to send directions ...\n");
		
		// Send directions one by one
		while(index < q_size){
			lcd_print_int(queue[index]);
     e80:	c8 01       	movw	r24, r16
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	fc 01       	movw	r30, r24
     e88:	e0 52       	subi	r30, 0x20	; 32
     e8a:	fd 4f       	sbci	r31, 0xFD	; 253
     e8c:	7f 01       	movw	r14, r30
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	0e 94 bf 03 	call	0x77e	; 0x77e <_Z13lcd_print_inti>
			sendDirections(queue[index], ESP_DEBUG);
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	f7 01       	movw	r30, r14
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z14sendDirectionsii>
		
			index++;
     ea4:	0f 5f       	subi	r16, 0xFF	; 255
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// If there are no more directions send 4 to finish
			while(index == q_size){
     ea8:	06 33       	cpi	r16, 0x36	; 54
     eaa:	11 05       	cpc	r17, r1
     eac:	61 f4       	brne	.+24     	; 0xec6 <main+0x98>
				lcd_print_int(4);
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 bf 03 	call	0x77e	; 0x77e <_Z13lcd_print_inti>
				sendDirections(4, ESP_DEBUG);
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z14sendDirectionsii>
				
				index++;
     ec2:	07 e3       	ldi	r16, 0x37	; 55
     ec4:	10 e0       	ldi	r17, 0x00	; 0
		// Get starting index
		index = BFS_start(x_start, y_start, x_end, y_end);
		lcd_print_string("Ready to send directions ...\n");
		
		// Send directions one by one
		while(index < q_size){
     ec6:	06 33       	cpi	r16, 0x36	; 54
     ec8:	11 05       	cpc	r17, r1
     eca:	d4 f2       	brlt	.-76     	; 0xe80 <main+0x52>
     ecc:	ff ef       	ldi	r31, 0xFF	; 255
     ece:	24 e3       	ldi	r18, 0x34	; 52
     ed0:	3c e0       	ldi	r19, 0x0C	; 12
     ed2:	f1 50       	subi	r31, 0x01	; 1
     ed4:	20 40       	sbci	r18, 0x00	; 0
     ed6:	30 40       	sbci	r19, 0x00	; 0
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <main+0xa4>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <main+0xae>
     edc:	00 00       	nop
	/* Replace with your application code */
	while (1)
	{
		//resetSensorsDestination(ESP_DEBUG);
		
		x_start = y_start = 0;
     ede:	1a 82       	std	Y+2, r1	; 0x02
     ee0:	19 82       	std	Y+1, r1	; 0x01
     ee2:	1c 82       	std	Y+4, r1	; 0x04
     ee4:	1b 82       	std	Y+3, r1	; 0x03
		PORTB = 0;
     ee6:	18 ba       	out	0x18, r1	; 24
		//lcd_print_string("Client connected!\n");
		
		// ??? Get position of client ???
		
		// Get destination of client
		getCoordinates(x_start, y_start, x_end, y_end, ESP_DEBUG);
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	10 e0       	ldi	r17, 0x00	; 0
     eec:	9e 01       	movw	r18, r28
     eee:	2b 5f       	subi	r18, 0xFB	; 251
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	ae 01       	movw	r20, r28
     ef4:	49 5f       	subi	r20, 0xF9	; 249
     ef6:	5f 4f       	sbci	r21, 0xFF	; 255
     ef8:	be 01       	movw	r22, r28
     efa:	6f 5f       	subi	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	ce 01       	movw	r24, r28
     f00:	03 96       	adiw	r24, 0x03	; 3
     f02:	0e 94 d6 06 	call	0xdac	; 0xdac <_Z14getCoordinatesRiS_S_S_i>
		
		// Get starting index
		index = BFS_start(x_start, y_start, x_end, y_end);
     f06:	2d 81       	ldd	r18, Y+5	; 0x05
     f08:	3e 81       	ldd	r19, Y+6	; 0x06
     f0a:	4f 81       	ldd	r20, Y+7	; 0x07
     f0c:	58 85       	ldd	r21, Y+8	; 0x08
     f0e:	69 81       	ldd	r22, Y+1	; 0x01
     f10:	7a 81       	ldd	r23, Y+2	; 0x02
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	0e 94 1c 05 	call	0xa38	; 0xa38 <_Z9BFS_startiiii>
     f1a:	8c 01       	movw	r16, r24
		lcd_print_string("Ready to send directions ...\n");
     f1c:	82 ec       	ldi	r24, 0xC2	; 194
     f1e:	92 e0       	ldi	r25, 0x02	; 2
     f20:	0e 94 a9 03 	call	0x752	; 0x752 <_Z16lcd_print_stringPKc>
     f24:	d0 cf       	rjmp	.-96     	; 0xec6 <main+0x98>

00000f26 <__divmodhi4>:
     f26:	97 fb       	bst	r25, 7
     f28:	07 2e       	mov	r0, r23
     f2a:	16 f4       	brtc	.+4      	; 0xf30 <__divmodhi4+0xa>
     f2c:	00 94       	com	r0
     f2e:	07 d0       	rcall	.+14     	; 0xf3e <__divmodhi4_neg1>
     f30:	77 fd       	sbrc	r23, 7
     f32:	09 d0       	rcall	.+18     	; 0xf46 <__divmodhi4_neg2>
     f34:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__udivmodhi4>
     f38:	07 fc       	sbrc	r0, 7
     f3a:	05 d0       	rcall	.+10     	; 0xf46 <__divmodhi4_neg2>
     f3c:	3e f4       	brtc	.+14     	; 0xf4c <__divmodhi4_exit>

00000f3e <__divmodhi4_neg1>:
     f3e:	90 95       	com	r25
     f40:	81 95       	neg	r24
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	08 95       	ret

00000f46 <__divmodhi4_neg2>:
     f46:	70 95       	com	r23
     f48:	61 95       	neg	r22
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f4c <__divmodhi4_exit>:
     f4c:	08 95       	ret

00000f4e <__udivmodhi4>:
     f4e:	aa 1b       	sub	r26, r26
     f50:	bb 1b       	sub	r27, r27
     f52:	51 e1       	ldi	r21, 0x11	; 17
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <__udivmodhi4_ep>

00000f56 <__udivmodhi4_loop>:
     f56:	aa 1f       	adc	r26, r26
     f58:	bb 1f       	adc	r27, r27
     f5a:	a6 17       	cp	r26, r22
     f5c:	b7 07       	cpc	r27, r23
     f5e:	10 f0       	brcs	.+4      	; 0xf64 <__udivmodhi4_ep>
     f60:	a6 1b       	sub	r26, r22
     f62:	b7 0b       	sbc	r27, r23

00000f64 <__udivmodhi4_ep>:
     f64:	88 1f       	adc	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	5a 95       	dec	r21
     f6a:	a9 f7       	brne	.-22     	; 0xf56 <__udivmodhi4_loop>
     f6c:	80 95       	com	r24
     f6e:	90 95       	com	r25
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	08 95       	ret

00000f76 <atoi>:
     f76:	fc 01       	movw	r30, r24
     f78:	88 27       	eor	r24, r24
     f7a:	99 27       	eor	r25, r25
     f7c:	e8 94       	clt
     f7e:	21 91       	ld	r18, Z+
     f80:	20 32       	cpi	r18, 0x20	; 32
     f82:	e9 f3       	breq	.-6      	; 0xf7e <atoi+0x8>
     f84:	29 30       	cpi	r18, 0x09	; 9
     f86:	10 f0       	brcs	.+4      	; 0xf8c <atoi+0x16>
     f88:	2e 30       	cpi	r18, 0x0E	; 14
     f8a:	c8 f3       	brcs	.-14     	; 0xf7e <atoi+0x8>
     f8c:	2b 32       	cpi	r18, 0x2B	; 43
     f8e:	41 f0       	breq	.+16     	; 0xfa0 <atoi+0x2a>
     f90:	2d 32       	cpi	r18, 0x2D	; 45
     f92:	39 f4       	brne	.+14     	; 0xfa2 <atoi+0x2c>
     f94:	68 94       	set
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <atoi+0x2a>
     f98:	0e 94 f8 07 	call	0xff0	; 0xff0 <__mulhi_const_10>
     f9c:	82 0f       	add	r24, r18
     f9e:	91 1d       	adc	r25, r1
     fa0:	21 91       	ld	r18, Z+
     fa2:	20 53       	subi	r18, 0x30	; 48
     fa4:	2a 30       	cpi	r18, 0x0A	; 10
     fa6:	c0 f3       	brcs	.-16     	; 0xf98 <atoi+0x22>
     fa8:	1e f4       	brtc	.+6      	; 0xfb0 <atoi+0x3a>
     faa:	90 95       	com	r25
     fac:	81 95       	neg	r24
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	08 95       	ret

00000fb2 <strcat>:
     fb2:	fb 01       	movw	r30, r22
     fb4:	dc 01       	movw	r26, r24
     fb6:	0d 90       	ld	r0, X+
     fb8:	00 20       	and	r0, r0
     fba:	e9 f7       	brne	.-6      	; 0xfb6 <strcat+0x4>
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	01 90       	ld	r0, Z+
     fc0:	0d 92       	st	X+, r0
     fc2:	00 20       	and	r0, r0
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <strcat+0xc>
     fc6:	08 95       	ret

00000fc8 <strcmp>:
     fc8:	fb 01       	movw	r30, r22
     fca:	dc 01       	movw	r26, r24
     fcc:	8d 91       	ld	r24, X+
     fce:	01 90       	ld	r0, Z+
     fd0:	80 19       	sub	r24, r0
     fd2:	01 10       	cpse	r0, r1
     fd4:	d9 f3       	breq	.-10     	; 0xfcc <strcmp+0x4>
     fd6:	99 0b       	sbc	r25, r25
     fd8:	08 95       	ret

00000fda <__itoa_ncheck>:
     fda:	bb 27       	eor	r27, r27
     fdc:	4a 30       	cpi	r20, 0x0A	; 10
     fde:	31 f4       	brne	.+12     	; 0xfec <__itoa_ncheck+0x12>
     fe0:	99 23       	and	r25, r25
     fe2:	22 f4       	brpl	.+8      	; 0xfec <__itoa_ncheck+0x12>
     fe4:	bd e2       	ldi	r27, 0x2D	; 45
     fe6:	90 95       	com	r25
     fe8:	81 95       	neg	r24
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__utoa_common>

00000ff0 <__mulhi_const_10>:
     ff0:	7a e0       	ldi	r23, 0x0A	; 10
     ff2:	97 9f       	mul	r25, r23
     ff4:	90 2d       	mov	r25, r0
     ff6:	87 9f       	mul	r24, r23
     ff8:	80 2d       	mov	r24, r0
     ffa:	91 0d       	add	r25, r1
     ffc:	11 24       	eor	r1, r1
     ffe:	08 95       	ret

00001000 <__utoa_ncheck>:
    1000:	bb 27       	eor	r27, r27

00001002 <__utoa_common>:
    1002:	fb 01       	movw	r30, r22
    1004:	55 27       	eor	r21, r21
    1006:	aa 27       	eor	r26, r26
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	aa 1f       	adc	r26, r26
    100e:	a4 17       	cp	r26, r20
    1010:	10 f0       	brcs	.+4      	; 0x1016 <__utoa_common+0x14>
    1012:	a4 1b       	sub	r26, r20
    1014:	83 95       	inc	r24
    1016:	50 51       	subi	r21, 0x10	; 16
    1018:	b9 f7       	brne	.-18     	; 0x1008 <__utoa_common+0x6>
    101a:	a0 5d       	subi	r26, 0xD0	; 208
    101c:	aa 33       	cpi	r26, 0x3A	; 58
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__utoa_common+0x20>
    1020:	a9 5d       	subi	r26, 0xD9	; 217
    1022:	a1 93       	st	Z+, r26
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	79 f7       	brne	.-34     	; 0x1006 <__utoa_common+0x4>
    1028:	b1 11       	cpse	r27, r1
    102a:	b1 93       	st	Z+, r27
    102c:	11 92       	st	Z+, r1
    102e:	cb 01       	movw	r24, r22
    1030:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <strrev>

00001034 <strrev>:
    1034:	dc 01       	movw	r26, r24
    1036:	fc 01       	movw	r30, r24
    1038:	67 2f       	mov	r22, r23
    103a:	71 91       	ld	r23, Z+
    103c:	77 23       	and	r23, r23
    103e:	e1 f7       	brne	.-8      	; 0x1038 <strrev+0x4>
    1040:	32 97       	sbiw	r30, 0x02	; 2
    1042:	04 c0       	rjmp	.+8      	; 0x104c <strrev+0x18>
    1044:	7c 91       	ld	r23, X
    1046:	6d 93       	st	X+, r22
    1048:	70 83       	st	Z, r23
    104a:	62 91       	ld	r22, -Z
    104c:	ae 17       	cp	r26, r30
    104e:	bf 07       	cpc	r27, r31
    1050:	c8 f3       	brcs	.-14     	; 0x1044 <strrev+0x10>
    1052:	08 95       	ret

00001054 <_exit>:
    1054:	f8 94       	cli

00001056 <__stop_program>:
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <__stop_program>
